"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/p-limit";
exports.ids = ["vendor-chunks/p-limit"];
exports.modules = {

/***/ "(rsc)/./node_modules/p-limit/index.js":
/*!***************************************!*\
  !*** ./node_modules/p-limit/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pLimit)\n/* harmony export */ });\n/* harmony import */ var yocto_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yocto-queue */ \"(rsc)/./node_modules/yocto-queue/index.js\");\n\n\nfunction pLimit(concurrency) {\n\tvalidateConcurrency(concurrency);\n\n\tconst queue = new yocto_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\tlet activeCount = 0;\n\n\tconst resumeNext = () => {\n\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t\t// Since `pendingCount` has been decreased by one, increase `activeCount` by one.\n\t\t\tactiveCount++;\n\t\t}\n\t};\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tresumeNext();\n\t};\n\n\tconst run = async (function_, resolve, arguments_) => {\n\t\tconst result = (async () => function_(...arguments_))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (function_, resolve, arguments_) => {\n\t\t// Queue `internalResolve` instead of the `run` function\n\t\t// to preserve asynchronous context.\n\t\tnew Promise(internalResolve => {\n\t\t\tqueue.enqueue(internalResolve);\n\t\t}).then(\n\t\t\trun.bind(undefined, function_, resolve, arguments_),\n\t\t);\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// after the `internalResolve` function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency) {\n\t\t\t\tresumeNext();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (function_, ...arguments_) => new Promise(resolve => {\n\t\tenqueue(function_, resolve, arguments_);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount,\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size,\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue() {\n\t\t\t\tqueue.clear();\n\t\t\t},\n\t\t},\n\t\tconcurrency: {\n\t\t\tget: () => concurrency,\n\n\t\t\tset(newConcurrency) {\n\t\t\t\tvalidateConcurrency(newConcurrency);\n\t\t\t\tconcurrency = newConcurrency;\n\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t// eslint-disable-next-line no-unmodified-loop-condition\n\t\t\t\t\twhile (activeCount < concurrency && queue.size > 0) {\n\t\t\t\t\t\tresumeNext();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t});\n\n\treturn generator;\n}\n\nfunction validateConcurrency(concurrency) {\n\tif (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcC1saW1pdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnQzs7QUFFakI7QUFDZjs7QUFFQSxtQkFBbUIsbURBQUs7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLXNlbmRlci8uL25vZGVfbW9kdWxlcy9wLWxpbWl0L2luZGV4LmpzP2MxZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXVlIGZyb20gJ3lvY3RvLXF1ZXVlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcExpbWl0KGNvbmN1cnJlbmN5KSB7XG5cdHZhbGlkYXRlQ29uY3VycmVuY3koY29uY3VycmVuY3kpO1xuXG5cdGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cdGxldCBhY3RpdmVDb3VudCA9IDA7XG5cblx0Y29uc3QgcmVzdW1lTmV4dCA9ICgpID0+IHtcblx0XHRpZiAoYWN0aXZlQ291bnQgPCBjb25jdXJyZW5jeSAmJiBxdWV1ZS5zaXplID4gMCkge1xuXHRcdFx0cXVldWUuZGVxdWV1ZSgpKCk7XG5cdFx0XHQvLyBTaW5jZSBgcGVuZGluZ0NvdW50YCBoYXMgYmVlbiBkZWNyZWFzZWQgYnkgb25lLCBpbmNyZWFzZSBgYWN0aXZlQ291bnRgIGJ5IG9uZS5cblx0XHRcdGFjdGl2ZUNvdW50Kys7XG5cdFx0fVxuXHR9O1xuXG5cdGNvbnN0IG5leHQgPSAoKSA9PiB7XG5cdFx0YWN0aXZlQ291bnQtLTtcblxuXHRcdHJlc3VtZU5leHQoKTtcblx0fTtcblxuXHRjb25zdCBydW4gPSBhc3luYyAoZnVuY3Rpb25fLCByZXNvbHZlLCBhcmd1bWVudHNfKSA9PiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gKGFzeW5jICgpID0+IGZ1bmN0aW9uXyguLi5hcmd1bWVudHNfKSkoKTtcblxuXHRcdHJlc29sdmUocmVzdWx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCByZXN1bHQ7XG5cdFx0fSBjYXRjaCB7fVxuXG5cdFx0bmV4dCgpO1xuXHR9O1xuXG5cdGNvbnN0IGVucXVldWUgPSAoZnVuY3Rpb25fLCByZXNvbHZlLCBhcmd1bWVudHNfKSA9PiB7XG5cdFx0Ly8gUXVldWUgYGludGVybmFsUmVzb2x2ZWAgaW5zdGVhZCBvZiB0aGUgYHJ1bmAgZnVuY3Rpb25cblx0XHQvLyB0byBwcmVzZXJ2ZSBhc3luY2hyb25vdXMgY29udGV4dC5cblx0XHRuZXcgUHJvbWlzZShpbnRlcm5hbFJlc29sdmUgPT4ge1xuXHRcdFx0cXVldWUuZW5xdWV1ZShpbnRlcm5hbFJlc29sdmUpO1xuXHRcdH0pLnRoZW4oXG5cdFx0XHRydW4uYmluZCh1bmRlZmluZWQsIGZ1bmN0aW9uXywgcmVzb2x2ZSwgYXJndW1lbnRzXyksXG5cdFx0KTtcblxuXHRcdChhc3luYyAoKSA9PiB7XG5cdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIHdhaXQgdW50aWwgdGhlIG5leHQgbWljcm90YXNrIGJlZm9yZSBjb21wYXJpbmdcblx0XHRcdC8vIGBhY3RpdmVDb3VudGAgdG8gYGNvbmN1cnJlbmN5YCwgYmVjYXVzZSBgYWN0aXZlQ291bnRgIGlzIHVwZGF0ZWQgYXN5bmNocm9ub3VzbHlcblx0XHRcdC8vIGFmdGVyIHRoZSBgaW50ZXJuYWxSZXNvbHZlYCBmdW5jdGlvbiBpcyBkZXF1ZXVlZCBhbmQgY2FsbGVkLiBUaGUgY29tcGFyaXNvbiBpbiB0aGUgaWYtc3RhdGVtZW50XG5cdFx0XHQvLyBuZWVkcyB0byBoYXBwZW4gYXN5bmNocm9ub3VzbHkgYXMgd2VsbCB0byBnZXQgYW4gdXAtdG8tZGF0ZSB2YWx1ZSBmb3IgYGFjdGl2ZUNvdW50YC5cblx0XHRcdGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuXG5cdFx0XHRpZiAoYWN0aXZlQ291bnQgPCBjb25jdXJyZW5jeSkge1xuXHRcdFx0XHRyZXN1bWVOZXh0KCk7XG5cdFx0XHR9XG5cdFx0fSkoKTtcblx0fTtcblxuXHRjb25zdCBnZW5lcmF0b3IgPSAoZnVuY3Rpb25fLCAuLi5hcmd1bWVudHNfKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRlbnF1ZXVlKGZ1bmN0aW9uXywgcmVzb2x2ZSwgYXJndW1lbnRzXyk7XG5cdH0pO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGdlbmVyYXRvciwge1xuXHRcdGFjdGl2ZUNvdW50OiB7XG5cdFx0XHRnZXQ6ICgpID0+IGFjdGl2ZUNvdW50LFxuXHRcdH0sXG5cdFx0cGVuZGluZ0NvdW50OiB7XG5cdFx0XHRnZXQ6ICgpID0+IHF1ZXVlLnNpemUsXG5cdFx0fSxcblx0XHRjbGVhclF1ZXVlOiB7XG5cdFx0XHR2YWx1ZSgpIHtcblx0XHRcdFx0cXVldWUuY2xlYXIoKTtcblx0XHRcdH0sXG5cdFx0fSxcblx0XHRjb25jdXJyZW5jeToge1xuXHRcdFx0Z2V0OiAoKSA9PiBjb25jdXJyZW5jeSxcblxuXHRcdFx0c2V0KG5ld0NvbmN1cnJlbmN5KSB7XG5cdFx0XHRcdHZhbGlkYXRlQ29uY3VycmVuY3kobmV3Q29uY3VycmVuY3kpO1xuXHRcdFx0XHRjb25jdXJyZW5jeSA9IG5ld0NvbmN1cnJlbmN5O1xuXG5cdFx0XHRcdHF1ZXVlTWljcm90YXNrKCgpID0+IHtcblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5tb2RpZmllZC1sb29wLWNvbmRpdGlvblxuXHRcdFx0XHRcdHdoaWxlIChhY3RpdmVDb3VudCA8IGNvbmN1cnJlbmN5ICYmIHF1ZXVlLnNpemUgPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXN1bWVOZXh0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0fSxcblx0fSk7XG5cblx0cmV0dXJuIGdlbmVyYXRvcjtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb25jdXJyZW5jeShjb25jdXJyZW5jeSkge1xuXHRpZiAoISgoTnVtYmVyLmlzSW50ZWdlcihjb25jdXJyZW5jeSkgfHwgY29uY3VycmVuY3kgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkgJiYgY29uY3VycmVuY3kgPiAwKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBjb25jdXJyZW5jeWAgdG8gYmUgYSBudW1iZXIgZnJvbSAxIGFuZCB1cCcpO1xuXHR9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/p-limit/index.js\n");

/***/ })

};
;